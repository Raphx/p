#!/usr/bin/env bash

#
# Setup.
#

VERSION="0.1.0"
UP=$'\033[A'
DOWN=$'\033[B'
P_PREFIX=${P_PREFIX-/usr/local}
BASE_VERSIONS_DIR=$P_PREFIX/p/versions
SYMLINK_DIR="bin include lib share"

[ -d "$BASE_VERSIONS_DIR"/python ] || mkdir -p "$BASE_VERSIONS_DIR"/python

# Python source

MIRROR=("${PYTHON_MIRROR-https://www.python.org/ftp/python/}")

# Ensure wget or curl command exists

GET=

command -v wget > /dev/null && GET="wget --no-check-certificate -q -O-"

command -v curl > /dev/null && GET="curl -# -L"

[ -z "$GET" ] && abort "curl or wget required"

#
# Utility functions.
#

# Log <type> <msg>

log() {
  printf '  \033[36m%10s\033[0m : \033[90m%s\033[0m\n' "$1" "$2"
}

# Exit with the given <msg ...>

abort() {
  printf '\n  \033[31mError: %s\033[0m\n\n' "$@" && exit 1
}

# Print a (differentiable from log) success message

success() {
  printf '\n  \033[32mSuccess: %s\033[0m\n\n' "$@"
}

# Gets current human-readable Python version.

get_current_version() {
  local version

  if ! version=$(python -V 2>&1); then
    abort "Python is not found. Try installing or activating one."
  fi

  current=${version#*Python }
}

# Check for installed version, and populate $active

check_current_version() {
  if command -v python &> /dev/null; then
    get_current_version
    if diff &> /dev/null \
      "$BASE_VERSIONS_DIR"/python/"$current"/bin/python \
      "$(command -v python)"; then
      active="python/$current"
    fi
  fi
}

# Display sorted versions directories paths.

versions_paths() {
  find "$BASE_VERSIONS_DIR" -maxdepth 2 -type d \
    | sed 's|'"$BASE_VERSIONS_DIR"'/||g' \
    | grep -E '[0-9]+\.[0-9]+\.[0-9]+([a|b]?)([0-9]?)+' \
    | sort -k 1,1n -k 2,2n -k 3,3n -t . -k 4,4n -d -k 5,5n -r
}

# Activate <version>, <version> is the type of python and version number
# e.g. python/3.6.5

activate() {
  local version=$1
  check_current_version
  if [ "$version" != "$active" ]; then
    for symdir in $SYMLINK_DIR; do
      ln -sfn "$BASE_VERSIONS_DIR/$version/$symdir" "$BASE_VERSIONS_DIR/$symdir"
    done
  fi
}

#
# Output p version.
#

display_p_version() {
  echo $VERSION && exit 0
}

#
# Output usage information.
#

display_help() {
  cat <<-EOF

  Usage: p [COMMAND] [args]

  Commands:

    p                              Output versions installed
    p ls                           Output the versions of Python available
      p ls latest                  Output the latest Python version available
      p ls stable                  Output the latest stable Python version available
    p <version>                    Activate to Python <version>
      p latest                     Activate to the latest Python release
      p stable                     Activate to the latest stable Python release
    p status                       Output current status
    p use <version> [args ...]     Execute Python <version> with [args ...]
    p bin <version>                Output bin path for <version>
    p rm <version ...>             Remove the given version(s)
    p default                      Use default (system) Python installation

  Options:

    -V, --version   Output current version of p
    -h, --help      Display help information

EOF

  exit 0
}

#
# Functions used when showing versions installed.
#

enter_fullscreen() {
  tput smcup
  stty -echo
}

leave_fullscreen() {
  tput rmcup
  stty echo
}

handle_sigint() {
  leave_fullscreen
  exit $?
}

handle_sigtstp() {
  leave_fullscreen
  kill -s SIGSTOP $$
}

list_versions_installed() {
  for version in $(versions_paths); do
    echo "${version}"
  done
}

next_version_installed() {
  list_versions_installed | grep "$selected" -A 1 | tail -n 1
}

prev_version_installed() {
  list_versions_installed | grep "$selected" -B 1 | head -n 1
}

display_versions_with_selected() {
  selected=$1
  echo
  for version in $(versions_paths); do
    version_minus_python=${version#*python\/}
    if [ "$version" = "$selected" ]; then
      printf '  \033[36mο\033[0m %s\033[0m\n' "$version_minus_python"
    else
      printf '    \033[90m%s\033[0m\n' "$version_minus_python"
    fi
  done
  echo
}

#
# Display installed python versions.
#

display_versions() {
  enter_fullscreen
  check_current_version
  clear
  display_versions_with_selected "$active"

  trap handle_sigint INT
  trap handle_sigtstp SIGTSTP

  while true; do
    read -r -n 3 c
    case "$c" in
      $UP)
        clear
        display_versions_with_selected "$(prev_version_installed)"
      ;;
      $DOWN)
        clear
        display_versions_with_selected "$(next_version_installed)"
      ;;
      *)
        activate "$selected"
        leave_fullscreen
        exit
      ;;
    esac
  done
}

#
# Display the versions available.
#

display_remote_versions() {
  check_current_version
  local versions=""
  versions=$($GET 2> /dev/null "${MIRROR[@]}" \
    | grep -E -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | grep -E -v '^0\.[0-7]\.' \
    | grep -E -v '^0\.8\.[0-5]$' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | head -n -1 \
    | awk '{ print "  " $1 }')

  echo

  for v in $versions; do
    if [ "$active" = "python/$v" ]; then
      printf '  \033[36mο\033[0m %s \033[0m\n' "$v"
    else
      if [ -d "$BASE_VERSIONS_DIR"/python/"$v" ]; then
        printf '    %s \033[0m\n' "$v"
      else
        printf '    \033[90m%s\033[0m\n' "$v"
      fi
    fi
  done

  echo
}

#
# Display the latest release version.
#

display_latest_version() {
  latest_directory=$($GET 2> /dev/null "${MIRROR[@]}" \
    | grep -E -o '[0-9]+\.[0-9]+\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1)

  $GET 2> /dev/null "${MIRROR[*]}$latest_directory" \
    | grep -E -o '[0-9]+\.[0-9]+\.[0-9]+[a|b][0-9]+' \
    | sort -k 1,1n -k 2,2n -k 3,3n -t . -k 4,4n -d -k 5,5n -d \
    | tail -n1
}

#
# Display the latest stable release version.
#

display_latest_stable_version() {
  $GET 2> /dev/null "${MIRROR[@]}" \
    | grep -E -o '[0-9]+\.[0-9]*[02468]\.[0-9]+' \
    | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
    | tail -n1
}

# Move up a line and erase.

erase_line() {
  printf '\033[1A\033[2K'
}

# Determine tarball url for <version>

tarball_url() {
  version_directory="${version%a*}"
  echo "${MIRROR[*]}${version_directory%b*}/Python-${version}.tgz"
}

# Check if the HEAD response of <url> is 200.

is_ok() {
  curl -Is "$1" | head -n 1 | grep 200 > /dev/null
}

#
# Install <version>
#

install() {
  local version=${1#v}

  local dots
  dots=${version//[^.]/}
  if [ ${#dots} -eq 1 ]; then
    version=$($GET 2> /dev/null "${MIRROR[@]}" \
      | grep -E -o '[0-9]+\.[0-9]+\.[0-9]+' \
      | grep -E -v '^0\.[0-7]\.' \
      | grep -E -v '^0\.8\.[0-5]$' \
      | sort -u -k 1,1n -k 2,2n -k 3,3n -t . \
      | grep -E ^"$version" \
      | tail -n1)

    [ "$version" ] || abort "invalid version ${1#v}"
  fi

  local dir=$BASE_VERSIONS_DIR/python/$version
  local url
  url=$(tarball_url "$version")

  if [ -d "$dir" ]; then
    if [ ! -e "$dir"/p.lock ]; then
      activate python/"$version"

      log activate "$version"

      get_current_version
      success "Now using Python $current!"

      exit
    fi
  fi

  echo
  log install Python-"$version"

  is_ok "$url" || abort "invalid version $version"

  if ! mkdir -p "$dir/src"; then
    abort "sudo required"
  else
    touch "$dir"/p.lock
  fi

  cd "$dir/src" || exit

  log fetch "$url"

  curl -L# "$url" | tar -zx --strip 1

  erase_line
  rm -f "$dir"/p.lock

  log configure "$version"
  ./configure --prefix="$dir" &> /dev/null

  log compile "$version"

  if ! make &> /dev/null; then
    abort "Unable to compile Python $version!"
  fi

  make install &> /dev/null

  cd "$dir" || exit
  rm -rf "$dir"/src

  if [ -f "$dir"/bin/python3 ]; then
    ln -sf "$dir"/bin/python3 "$dir"/bin/python
  fi

  if [ -f "$dir"/bin/pip3 ]; then
    ln -sf "$dir"/bin/pip3 "$dir"/bin/pip
  fi

  log activate "$version"
  activate python/"$version"

  success "Installed Python $version!"
}

# Determine if current version is the latest version.

is_latest_version() {
  get_current_version
  if [ "$current" == "$(display_latest_version)" ]; then
    echo "yes"
  else
    echo "no"
  fi
}

# Determine if current version is the latest stable version.

is_latest_stable_version() {
  get_current_version
  if [ "$current" == "$(display_latest_stable_version)" ]; then
    echo "yes"
  else
    echo "no"
  fi
}

#
# Output status.
#

display_status() {
  get_current_version

  log version "$current"
  log bin "$(display_bin_path_for_version)"
  log latest "$(is_latest_version)"
  log stable "$(is_latest_stable_version)"
}

#
# Execute the given <version> of Python with [args ...]
#

execute_with_version() {
  [ -z "$1" ] && abort "version required"
  local version=${1#v}

  if [ "$version" = "latest" ]; then
    version=$(display_latest_version)
  elif [ "$version" = "stable" ]; then
    version=$(display_latest_stable_version)
  fi

  local bin=$BASE_VERSIONS_DIR/python/$version/bin/python

  shift # remove version

  if [ -f "$bin" ]; then
    $bin "$@"
  else
    abort "Python $version is not installed"
  fi
}

#
# Output bin path for <version>
#

display_bin_path_for_version() {
  get_current_version

  if [ ! -z "$1" ]; then
    local version=${1#v}
  else
    if [ ! -d "$BASE_VERSIONS_DIR"/python/"$current" ]; then
      abort "Version required!"
    else
      local version=$current;
    fi
  fi

  local bin=$BASE_VERSIONS_DIR/python/$version/bin/python
  if [ -f "$bin" ]; then
    printf '%s \n' "$bin"
  else
    abort "Python $version is not installed"
  fi
}

#
# Remove <version ...>
#

remove_versions() {
  [ -z "$1" ] && abort "version(s) required"

  for version in "$@"; do
    if [ "$version" = "latest" ]; then
      version=$(display_latest_version)
    elif [ "$version" = "stable" ]; then
      version=$(display_latest_stable_version)
    fi

    if [ -d "$BASE_VERSIONS_DIR"/python/"${version#v}" ]; then
      rm -rf "$BASE_VERSIONS_DIR"/python/"${version#v}"
      log remove "$version"
    else
      abort "Python $version is not installed"
    fi
  done

  versions="$*"

  success "Removed Python ${versions// /, }!"
}

#
# Activate default (prior to p) Python.
#

activate_default() {
  log activate default

  for symdir in $SYMLINK_DIR; do
    rm "$BASE_VERSIONS_DIR/$symdir" 2> /dev/null
  done

  success "Now using default system Python!"
}

#
# Handle arguments.
#

if [ $# -eq 0 ]; then
  [ -z "$(versions_paths)" ] && abort "no installed version"
  display_versions
else
  while [ $# -ne 0 ]; do
    case "$1" in
      -V|--version) display_p_version; exit ;;
      -h|--help|help) display_help; exit ;;
      ls)
        case $2 in
          latest) display_latest_version ;;
          stable) display_latest_stable_version ;;
          *) display_remote_versions ;;
        esac
        exit
      ;;
      status) display_status; exit ;;
      use)
        shift;
        execute_with_version "$@"
        exit
      ;;
      bin)
        case $2 in
          latest) display_bin_path_for_version "$($0 ls latest)" ;;
          stable) display_bin_path_for_version "$($0 ls stable)" ;;
          *) display_bin_path_for_version "$2" ;;
        esac
        exit
      ;;
      rm|-)
        shift;
        remove_versions "$@"
        exit
      ;;
      default) activate_default; exit ;;
      latest) install "$($0 ls latest)"; exit ;;
      stable) install "$($0 ls stable)"; exit ;;
      *) install "$1"; exit ;;
    esac

    shift
  done
fi
